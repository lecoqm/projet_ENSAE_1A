from graph import Graph, graph_from_file
from kruskal import kruskal, union, find
import time
import sys
import numpy as np

def realiste(file_in,file_out,epsilon,file_network,fuel):
    """
    Cette fonction prend un fichier avec les routes et renvoie un nouveau fichier 
    avec le profit corrig√©.
    """
    g=graph_from_file(file_network)
    sys.setrecursionlimit(g.nb_edges)
    print("a")
    g_mst=kruskal(g)
    print("a")
    g_mst.Depth_First_Search_init()
    print("a")

    f=open(file_in,"r")
    lines=f.readlines()
    nb_routes=lines.pop(0)
    routes=[]
    for l in lines:
        data=l.split(" ")
        routes.append([int(data[0]),int(data[1]),float(data[2].rstrip("\n"))])
    
    for i in range(len(routes)):
        print(i)
        path,power=g_mst.kpath(routes[i][0], routes[i][1])
        dist=0
        if path==None:
            routes[i][2]=0
        else:
            for j in range(len(path)-1):
                neighbors=g_mst.graph[path[j]]
                for k in range(len(neighbors)):
                    if g_mst.graph[path[j]][k][0]==path[j+1]:
                        dist+=g_mst.graph[path[j]][k][2]
                        break
            routes[i][2]=routes[i][2]*((1-epsilon)**(len(path)-1))-dist*fuel
        with open(file_out,"w") as f_out:
            f_out.write(str(nb_routes))
            for route in routes:
                f_out.write(str(route[0])+" "+str(route[1])+" "+str(route[2])+"\n")

file_network="/home/onyxia/projet_ENSAE_1A/input/network.2.in"
file_in="/home/onyxia/projet_ENSAE_1A/input/routes.2.in"
file_out="/home/onyxia/projet_ENSAE_1A/output/routes.2.realiste.in"
epsilon=0.001
fuel=0.01


realiste(file_in,file_out,epsilon,file_network,fuel)
