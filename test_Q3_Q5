

def get_path_with_power(self, src, dest, power):
    nodesPassed=[]
    dist=[np.inf]*len(self.nodes)
    dist[src-1]=0
    test=True
    predecessor={}
    while test:
        node=1+dist.index(min(dist))
        nodesPassed.append(node)
        neighbors=[]
        for i in range(len(self.graph[node])):
            if self.graph[node][i][0] not in nodesPassed and self.graph[node][i][1]<=power:
                neighbors.append(self.graph[node][i])
        for node_neighbor in neighbors:
            if dist[node_neighbor[0]-1]>dist(node-1)+node_neighbor[2]:
                dist[node_neighbor[0]-1]=dist(node-1)+node_neighbor[2]
                predecessor[node_neighbor[0]]=node
        test=False
        for i in range (1,1+len(dist)):
            if i not in nodesPassed and dist[i-1]!=np.inf:
                test=True
        for i in nodesPassed:
            if i==dest:
                test=True
                break
    if test:
        path=[dest]
        node=dest
        while node != src:
            node=predecessor[node]
            path.append(node)
        path.reverse()
        return path
    else:
        return None
